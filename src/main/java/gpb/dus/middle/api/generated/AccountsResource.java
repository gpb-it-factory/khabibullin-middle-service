/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package gpb.dus.middle.api.generated;

import gpb.dus.middle.api.generated.model.ConflictApi;
import gpb.dus.middle.api.generated.model.CreateAccountRequestV2Api;
import gpb.dus.middle.api.generated.model.ErrorV2Api;
import gpb.dus.middle.api.generated.model.UnauthorizedApi;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-06-26T16:56:00.702950276+03:00[Europe/Moscow]")
@Validated
@Tag(name = "accounts", description = "Операции со счетами пользователей")
public interface AccountsResource {

    /**
     * POST /middle/v2/users/{id}/accounts : Открыть новый счёт для пользователя (V2)
     *
     * @param id Идентификатор пользователя в Telegram (required)
     * @param createAccountRequestV2Api  (required)
     * @return Счёт создан (status code 204)
     *         or Такой счет у данного пользователя уже есть (status code 409)
     *         or Пользователь не найден (status code 401)
     *         or Непредвиденная ошибка (status code 200)
     */
    @Operation(
        operationId = "createUserAccountV2",
        summary = "Открыть новый счёт для пользователя (V2)",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Счёт создан"),
            @ApiResponse(responseCode = "409", description = "Такой счет у данного пользователя уже есть", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ConflictApi.class))
            }),
            @ApiResponse(responseCode = "401", description = "Пользователь не найден", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UnauthorizedApi.class))
            }),
            @ApiResponse(responseCode = "default", description = "Непредвиденная ошибка", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorV2Api.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/middle/v2/users/{id}/accounts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> createUserAccountV2(
        @Parameter(name = "id", description = "Идентификатор пользователя в Telegram", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "CreateAccountRequestV2Api", description = "", required = true) @Valid @RequestBody CreateAccountRequestV2Api createAccountRequestV2Api
    );

}
